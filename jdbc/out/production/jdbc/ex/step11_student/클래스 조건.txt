*** 테이블 및 시퀀스 작성 ***
1. 테이블 이름 : hakjum
 LOWSCORE     NUMBER(3)
 HISCORE      NUMBER(5,2)
 GRADE        VARCHAR2(3)  -- 기본키

sql>select * from hakjum
LOWSCORE HISCORE GRADE
---------- ---------- ------
         0      59.99       F
        60      64.99      D0
        65      69.99      D+
        70      74.99      C0
        75      79.99      C+
        80      84.99      B0
        85      89.99      B+
        90      94.99      A0
        95      100        A+


2. 테이블 이름 : student
 NO               NUMBER  -- 기본키
 NAME             VARCHAR2(21) -- not null
 KOR              NUMBER(3)  -- 0~100 사이의 값, not null
 MATH             NUMBER(3)  -- 0~100 사이의 값,not null
 ENG              NUMBER(3)  -- 0~100 사이의 값,not null
 TOT              NUMBER(3)
 AVG              NUMBER(5,2)
 GRADE            VARCHAR2(3)

3. 제약조건
    student의 GRADE 컬럼은 hakjum테이블의 GRADE컬럼을 부모키로 사용합니다.
    student의 GRADE 컬럼은 외래키입니다.

4. 1부터 1씩 증가하는 시퀀스 만들기
    시퀀스 이름:  student_seq

김수연 수신자 모두 3:46 PM
*** Student3 클래스를 만들어 봅시다. ***
 1. 모든 컬럼에 대해 setter와 getter메서드 작성합니다.
 
 2. toString() 작성합니다. 
    - 모든 필드를 문자열로 연결해서 리턴합니다. 
    - 필드 사이에 "\t"를 넣어 주세요
    
 3. 클래스의 일부분입니다.  
    public class Student3 {
		private int no;
		private String name;
		private int kor;
		private int math;
		private int eng;
		private int tot;
		private float avg;
		private String grade;
	
	public Student3() {
		
	}
	public Student3(String name, int kor, int math,int  eng) {
		this.name =name;
		this.kor =kor;
		this.math = math;
		this.eng = eng;
		this.tot = kor + math + eng ;
		this.avg = tot/3f;
	}
	   
    public String toString() {
      
    }

*** 다음 main()메서드와 출력결과를 참고로 DAO 클래스와 각각의 메서드를 완성하세요. ***
public static void main(String[] args) {
		Scanner sc = new Scanner(System.in);		
		DAO dao = new DAO();	

		do {
			int menu = menuselect(sc);
			switch (menu) {
			case 1:
				insert(sc, dao);
				break;
			case 2:
				select(sc, dao);
				break;
			case 3:
				update(sc, dao);
				break;
			case 4:
				delete(sc, dao);
				break;
			case 5:
				selectAll(dao);
				break;
			case 6:
			     sc.close();
				 return;
			}
		} while (true);
	}

*** 메서드 ***
1. menuselect
   (1) 반환형 :  정수
   (2) 매개변수 : Scanner형 1개
   (3) 기능
        - 메뉴 항목을 String 배열(menus)로 만든 후 메뉴 항목을 출력합니다.
        - 메뉴를 입력받은 후 리턴합니다.
   (4) 리턴값 : 선택한 메뉴의 값입니다.
          inputNumber(sc, 1, menus.length);를 호출한 결과값입니다.

 출력결과)
===========================================================
1.입력
2.조회
3.수정
4.삭제
5.모두조회
6.종료
===========================================================
메뉴를 선택하세요>y
숫자로 입력하세요>u
숫자로 입력하세요>8
1~6사이의 숫자를 입력하세요>7
1~6사이의 숫자를 입력하세요>6


2. inputNumber(Scanner sc, int start, int end)
     입력한 데이터가 숫자인지와 범위(1~menus.length)의 값인지 확인 후
     조건에 맞는 숫자만 리턴하는 메서드

3. insert
   (1) 반환형 :  void
   (2) 매개변수 : Scanner형 1개, DAO형 1개
   (3) 기능
        - 이름, 국어, 수학, 영어 점수를 입력 받습니다.

        - 국어, 수학, 영어 점수는 0~100까지 범위의 숫자만 입력받습니다.

        - 입력 받은 데이터는 Student3 객체 생성에 사용합니다.

        - DAO의 insert()를 호출해서 데이터를 삽입합니다.
          이때 사용되는 인자는 Student3 객체입니다.

        - DAO의 insert() 후 삽입 결과가 1이면 "삽입 되었습니다."
          0이면 "삽입 실패되었습니다." 라고 출력됩니다.
출력결과)
===========================================================
1.입력
2.조회
3.수정
4.삭제
5.모두조회
6.종료
===========================================================
메뉴를 선택하세요>1
이름을 입력하세요>이 광수
국어점수를 입력하세요>96
수학점수를 입력하세요>85
영어점수를 입력하세요>93
db에 반영됨 . . . . . .
삽입 되었습니다.
===========================================================
1.입력
2.조회
3.수정
4.삭제
5.모두조회
6.종료

4. selectAll
   (1) 반환형 :  void
   (2) 매개변수 : DAO형 1개
   (3) 기능
        - ArrayList<Student3>를 반환형으로 갖는  DAO의 selectAll()을 호출합니다.
        - 만약 DAO의 selectAll() 호출 결과 isEmpty()가 참 이면 "테이블에 데이터가 없습니다."라고 출력합니다.
        - 아니면 아래의 출력결과와 같습니다.

			메뉴를 선택하세요>5
			번호	이름		국어	수학	영어	총점	평균		학점
			1	이 광수	96	85	93	274	91.33	A0
			===========================================================

5. select
   (1) 반환형 :  void
   (2) 매개변수 : Scanner형 1개, DAO형 1개
   (3) 기능
        - 조회할 번호를 입력받아 DAO의 select(입력받은번호)를 호출합니다.
        - 조회할 번호를 입력 받기 위해 inputNumber(sc)를 이용합니다.
        - 만약 DAO의 select() 호출 결과 null이면 "해당 번호로 조회된 학생이 없습니다."라고 출력합니다.
        - null이 아니면 아래의 출력결과와 같습니다.

		메뉴를 선택하세요>2
		조회할 번호를 입력하세요>a
		숫자로 입력하세요>1
		번호	이름	국어	수학	영어	총점	평균	학점
		1	이 광수	96	85	93	274	91.33	A0
		===========================================================


6. inputNumber
   (1) 반환형 : int
   (2) 매개변수 :	Scanner형 1개
   (3) 기능
       - inputNumber(sc, 0, 0)을 호출합니다.
	   - 매개변수 3개를 갖는 inputNumber()내의 if문 수정합니다.
	      if (input <= end && input >= start)
	      => input의 값이 start~end 사이의 값 이거나 start와 end의 값이 0인 경우

7. update
(1) 반환형 :  void
   (2) 매개변수 : Scanner형 1개, DAO형 1개
   (3) 기능
        - 수정할 번호를 입력 받습니다.

        - 만일 이 번호에 해당하는 로우가 존재하면 수정 작업을 진행하고
          아니면 "테이블에 없는 번호 입니다."라고 출력합니다.
        - 수정할 번호에 해당하는 로우의 존재 여부는 isExist(수정할 번호, DAO) 메서드로 확인합니다.

        - 수정 작업은 이름, 국어, 수학, 영어를 차례대로 입력 후
          객체 생성합니다. 이때 번호는 setNo(수정할 번호)를 호출해서 저장합니다.

        - DAO의 update(생성한 객체)를 호출해서 데이터 베이스에 반영합니다.
          만약 update()호출 결과값이 1이면  "수정이 되었습니다."
          아니면 "수정 중 오류 발생했습니다."라고 출력합니다.
 출력결과)
===========================================================
메뉴를 선택하세요>5
번호	이름		국어	수학	영어	총점	평균		학점
1	이 광수	96	85	93	274	91.33	A0
2	홍 길동	95	95	90	280	93.33	A0
===========================================================
1.입력
2.조회
3.수정
4.삭제
5.모두조회
6.종료
===========================================================
메뉴를 선택하세요>3
수정할 번호를 입력하세요>3
테이블에 없는 번호 입니다.
===========================================================
1.입력
2.조회
3.수정
4.삭제
5.모두조회
6.종료
===========================================================
메뉴를 선택하세요>3
수정할 번호를 입력하세요>2
이름을 입력하세요>홍길동
국어점수를 입력하세요>100
수학점수를 입력하세요>100
영어점수를 입력하세요>100
수정이 되었습니다.
===========================================================
1.입력
2.조회
3.수정
4.삭제
5.모두조회
6.종료
===========================================================
메뉴를 선택하세요>5
번호	이름	국어	수학	영어	총점	평균	학점
1	이 광수	96	85	93	274	91.33	A0
2	홍길동	100	100	100	300	100.0	A+
===========================================================
8. isExist
   (1) 반환형 :  boolean
   (2) 매개변수 : int형  1개, DAO형 1개
   (3) 기능
        - DAO의 select(첫번째 매개변수값)을 호출 후  null이면 false, null이 아니면 true를 반환합니다.

9. delete
   (1) 반환형 :  void
   (2) 매개변수 : Scanner형 1개, DAO형 1개
   (3) 기능
       - 삭제할 번호를 입력받습니다.

       - 해당 번호의 로우가 존재하는지 isExist(삭제할번호,DAO)를 호출합니다.
                 로우가 존재하면 삭제 작업 진행합니다. 삭제는 DAO의 delete(삭제할번호)를 호출합니다.
                 로우가 존재하지 않으면  "테이블에 없는 번호 입니다."라고 출력합니다.

       - 삭제가 되면     "삭제 되었습니다." 아니면     "삭제 되지 않았습니다."라고 출력합니다.
    (4) 출력결과
       메뉴를 선택하세요>5
		번호	이름	국어	수학	영어	총점	평균	학점
		1	이 광수	96	85	93	274	91.33	A0
		2	홍길동	100	100	100	300	100.0	A+
		3	홍길동1	100	100	100	300	100.0	A+
		===========================================================
		1.입력
		2.조회
		3.수정
		4.삭제
		5.모두조회
		6.종료
		===========================================================
		메뉴를 선택하세요>4
		삭제할 번호를 입력하세요>3
		삭제 되었습니다.
		===========================================================
		1.입력
		2.조회
		3.수정
		4.삭제
		5.모두조회
		6.종료